
trigger:
- main

pool:
  vmImage: 'macos-latest'

variables:
  buildConfiguration: 'Release'
  outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'
  solutionName: 'Cryptollet/Cryptollet.sln'
  androidProject: 'Cryptollet/Cryptollet.Android/Cryptollet.Android.csproj'
  testProject: 'Cryptollet/Cryptollet.Tests/Cryptollet.Tests.csproj'

jobs:

- job: BuildAndroid
  displayName: 'Build Android App'

  steps:

    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solutionName)'

    - task: XamarinAndroid@1
      inputs:
        projectFile: $(androidProject)
        outputDirectory: '$(outputDirectory)'
        configuration: '$(buildConfiguration)'

    - task: AndroidSigning@3
      inputs:
        apkFiles: '**/*.apk'
        apksignerKeystoreFile: 'droid-ks-crypto.keystore'
        apksignerKeystorePassword: '$(keystorePassword)'
        apksignerKeystoreAlias: '$(keystoreName)'
        apksignerKeyPassword: '$(keystorePassword)'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'Cryptollet/Cryptollet.Android/obj/Release/android/bin/com.companyname.cryptollet.apk'
        artifactName: AndroidApk


- job: BuildiOS
  displayName: 'Build iOS App'

  steps:

    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solutionName)'

    - task: XamariniOS@2
      inputs:
        solutionFile: '$(solutionName)'
        configuration: '$(buildConfiguration)'
        packageApp: false
        buildForSimulator: true
        runNugetRestore: false

- job: RunTests
  displayName: 'Run unit tests'

  steps:
  - task: DotNetCoreCLI@2
    inputs:
      command: 'test'
      projects: $(testProject)
      configuration: '$(buildConfiguration)'