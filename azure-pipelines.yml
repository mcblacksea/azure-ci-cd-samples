
trigger:
- main

pool:
  vmImage: 'macOS-11'

variables:
  buildConfiguration: 'Release'
  outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'
  solutionName: 'Cryptollet/Cryptollet.sln'
  androidProject: 'Cryptollet/Cryptollet.Android/Cryptollet.Android.csproj'
  testProject: 'Cryptollet/Cryptollet.Tests/Cryptollet.Tests.csproj'

stages:
- stage: BuildApps
  displayName: 'Build The Apps'

  jobs:

  - job: BuildAndroid
    displayName: 'Build Android App'

    steps:

      - task: NuGetToolInstaller@1

      - task: NuGetCommand@2
        inputs:
          restoreSolution: '$(solutionName)'

      - task: XamarinAndroid@1
        inputs:
          projectFile: $(androidProject)
          outputDirectory: '$(outputDirectory)'
          configuration: '$(buildConfiguration)'

      - task: AndroidSigning@3
        inputs:
          apkFiles: '**/*.apk'
          apksignerKeystoreFile: 'droid-ks-crypto.keystore'
          apksignerKeystorePassword: '$(keystorePassword)'
          apksignerKeystoreAlias: '$(keystoreName)'
          apksignerKeyPassword: '$(keystorePassword)'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'Cryptollet/Cryptollet.Android/obj/Release/android/bin/com.companyname.cryptollet.apk'
          artifactName: AndroidApk


  - job: BuildiOS
    displayName: 'Build iOS App'

    steps:

      - task: NuGetToolInstaller@1

      - task: NuGetCommand@2
        inputs:
          restoreSolution: '$(solutionName)'

      - task: InstallAppleCertificate@2
        inputs:
          certSecureFile: 'Certificates.p12'
          certPwd: '$(keystorePassword)'
          keychain: 'temp'

      - task: InstallAppleProvisioningProfile@1
        inputs:
          provisioningProfileLocation: 'secureFiles'
          provProfileSecureFile: 'Ad_Hoc_2021_12_06.mobileprovision'

      - task: XamariniOS@2
        inputs:
          solutionFile: '$(solutionName)'
          configuration: '$(buildConfiguration)'
          packageApp: true
          buildForSimulator: false
          runNugetRestore: false
          signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
          signingProvisioningProfileID: '$(APPLE_PROV_PROFILE_UUID)'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'Cryptollet/Cryptollet.iOS/bin/iPhone/Release/Cryptollet.iOS.ipa'
          artifactName: iOSIpa


  - job: RunTests
    displayName: 'Run unit tests'

    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: $(testProject)
        configuration: '$(buildConfiguration)'

- stage: BetaVersions
  dependsOn: BuildApps
  displayName: 'Beta Release'

  jobs:

  - job: AndroidBeta
    displayName: 'Release Android Beta'

    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: AndroidApk

      - task: AppCenterDistribute@3
        inputs:
          serverEndpoint: 'App Center'
          appSlug: 'Longimanus/Cryptollet-1'
          appFile: '$(Pipeline.Workspace)/com.companyname.cryptollet.apk'
          releaseNotesOption: 'file'
          releaseNotesFile: 'releasenotes.txt'
          destinationType: 'groups'
          distributionGroupId: '1a9dc800-5de5-4df1-bfb6-5ddc1177394a'
          
  - job: iOSBeta
    displayName: 'Release iOS Beta'

    steps:

      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: iOSIpa
      
      - task: AppCenterDistribute@3
        inputs:
          serverEndpoint: 'App Center'
          appSlug: 'Longimanus/Cryptollet'
          appFile: '$(Pipeline.Workspace)/Cryptollet.iOS.ipa'
          releaseNotesOption: 'file'
          releaseNotesFile: 'releasenotes.txt'
          destinationType: 'groups'
          distributionGroupId: 'ad55920a-cc95-4f53-91d7-abc2776e37aa'